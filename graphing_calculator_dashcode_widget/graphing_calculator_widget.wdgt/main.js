/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

function draw_graph(event)
{
    // Canvas variables
    var theCanvas = document.getElementById('graph_area'); // replace with the ID of your canvas element 
    var context = theCanvas.getContext('2d');
    reset_graph();
    display_axes();
    validate_slope_and_draw();
    
    function reset_graph() {
        theCanvas.width = theCanvas.width; // Reset grid
    }
    
    function validate_slope_and_draw()
    {
        // Get message box element and slope field element
        var message_box = document.getElementById("messagebox");
        var slope_element = document.getElementById("slope");
        // Get slope value entered
        var slope_value = slope_element.value;
        // Validate slope input
        var valid_slope_pattern = /^-?[0-9]+$/;
        if (slope_value.match(valid_slope_pattern)) {
            draw_grid_line(slope_value, "green", message_box);
        } else {
            message_box.innerHTML = "Invalid slope value: " + slope_value;
        }
    }
    
    function display_axes(event)
    {
        var i = 0;
        axis_pos = 1;
        can_width = theCanvas.width; // Get the width of the canvas
	
        // Loop through and draw horizontal/vertical lines at each eighth of the grid
        // All logic below presumes canvas has square dimensions
        for (i=0;i<=can_width;i+=(can_width)/8)
        {
            if (i == (can_width)/2) // Special handling for horiz/vert axes
            {
                context.lineWidth = 3; // Axes are thicker...
                context.strokeStyle = 'red'; //... and in red
            }
            else
            {
                context.lineWidth = 1;
                context.strokeStyle = 'black';
            }
            // First draw vertical line
            context.beginPath();
            context.moveTo(i, 0);
            context.lineTo(i, can_width);
            context.stroke();
            context.closePath();
            // Then draw horizontal line
            context.beginPath();
            context.moveTo(0, i);
            context.lineTo(can_width, i);
            context.stroke();
            context.closePath();
        }
        // Then add axis number labels
        context.font         = '20px _sans';
        context.textBaseline = 'top';
        // Move canvas origin to center of grid
        context.translate(can_width / 2, can_width / 2);
        for (i=-3;i<=3;i++) {
            if (i != 0) { // Skip labeling origin
                // horizontal label
                context.fillText  (i, i*(can_width/8) + 5, 5);
                // vertical label
                context.fillText  (i, 5, -i*(can_width/8));
            }
        }
        // Add bold-italic x- and y labels on the axes, too
        context.font = 'italic bold 20px _sans';
        context.fillText ("x", (can_width/2)-12, 1);
        context.fillText ("y", 4, -(can_width/2));
    }
    
    function draw_grid_line (slope, color, message_box) {
        init_x = -(theCanvas.width)/2; // start with x = left edge of grid
        // Note: Must reverse sign y-coordinate, as negative y-coordinates are top half of grid by default, not bottom
        init_y = -(init_x) * slope // y = mx
        new_x = init_x;
        new_y = init_y;
        var drawLineIntervalId = 0;
        message_box.innerHTML = "Drawing equation y = " + slope + "x";
        graph_in_progress = "yes" // line now being drawn
        drawLineIntervalId = setInterval(do_animation, 33);
        

        function do_animation () {
            context.lineWidth = 6;
            context.strokeStyle = color;
            context.beginPath();
            context.moveTo(init_x, init_y);
            context.lineTo(new_x, new_y);
            context.stroke();
            context.closePath();
            new_x = new_x + 5
            new_y = -(new_x) * slope
            context.lineTo(new_x, new_y)
            if (new_x == theCanvas.width + 5) {
            clearInterval(drawLineIntervalId); // stop animation when line is complete
            graph_in_progress = "no" // line is now done
            message_box.innerHTML = 'Enter a slope below, and click "Draw Graph"'
	    }
	}
}

}

